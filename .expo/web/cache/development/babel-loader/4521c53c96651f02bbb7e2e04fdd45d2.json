{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/ilimilku/Projects/gntreader-rngp/client/gntreader/GNT-Reader-React-Native-Client/components/flashcard-modal.js\";\n\nimport React, { useState } from \"react\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { useMutation } from \"react-apollo\";\nimport { createFlashcardMutation } from \"./queries\";\n\nvar FlashcardModal = function FlashcardModal(props) {\n  var _useState = useState([{\n    name: \"star1\",\n    level: 1,\n    isFilled: false\n  }, {\n    name: \"star2\",\n    level: 2,\n    isFilled: false\n  }, {\n    name: \"star3\",\n    level: 3,\n    isFilled: false\n  }, {\n    name: \"star4\",\n    level: 4,\n    isFilled: false\n  }, {\n    name: \"star5\",\n    level: 5,\n    isFilled: false\n  }]),\n      _useState2 = _slicedToArray(_useState, 2),\n      stars = _useState2[0],\n      setStars = _useState2[1];\n\n  var _useMutation = useMutation(createFlashcardMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createFlashcard = _useMutation2[0],\n      mutationData = _useMutation2[1].mutationData;\n\n  var onStarPress = function onStarPress(star) {\n    if (!star.isFilled) {\n      stars.map(function (st) {\n        if (st.level <= star.level) st.isFilled = true;\n      });\n\n      var newStars = _toConsumableArray(stars);\n\n      setStars(newStars);\n    }\n\n    createFlashcard({\n      variables: {\n        pos: props.word.pos,\n        parsing: props.word.parsing,\n        word: props.word.word,\n        lemma: props.word.lemma,\n        gloss: props.word.gloss,\n        isActive: true,\n        levelLearned: star.level\n      }\n    });\n    props.onSelectLevel();\n  };\n\n  return React.createElement(View, {\n    style: styles.modalContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: props.visible,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: styles.modalView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, React.createElement(View, {\n    style: styles.textContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 29\n    }\n  }, \"How well do you know \", props.word.word, \"?\")), React.createElement(View, {\n    style: styles.starContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, stars.map(function (star, i) {\n    if (!star.isFilled) {\n      return React.createElement(TouchableWithoutFeedback, {\n        key: star.level,\n        onPress: function onPress() {\n          return onStarPress(star);\n        },\n        style: styles.star,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 45\n        }\n      }, React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 49\n        }\n      }, \"U\"));\n    } else {\n      return React.createElement(TouchableWithoutFeedback, {\n        key: star.level,\n        onPress: function onPress() {\n          return onStarPress(star);\n        },\n        style: styles.star,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 45\n        }\n      }, React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 49\n        }\n      }, \"F\"));\n    }\n  }))))));\n};\n\nvar styles = StyleSheet.create({\n  modalContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  modalView: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginVertical: 20,\n    marginHorizontal: 0,\n    backgroundColor: \"white\",\n    borderWidth: 0,\n    borderColor: 'transparent',\n    borderRadius: 20,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n    height: 200,\n    width: \"100%\"\n  },\n  textContainer: {\n    flex: 1,\n    alignItems: \"center\"\n  },\n  starContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n    flex: 1\n  },\n  star: {\n    flex: 1,\n    padding: 20\n  }\n});\nexport default FlashcardModal;","map":{"version":3,"sources":["/Users/ilimilku/Projects/gntreader-rngp/client/gntreader/GNT-Reader-React-Native-Client/components/flashcard-modal.js"],"names":["React","useState","useMutation","createFlashcardMutation","FlashcardModal","props","name","level","isFilled","stars","setStars","createFlashcard","mutationData","onStarPress","star","map","st","newStars","variables","pos","word","parsing","lemma","gloss","isActive","levelLearned","onSelectLevel","styles","modalContainer","visible","flex","flexDirection","justifyContent","alignItems","modalView","textContainer","starContainer","i","StyleSheet","create","display","marginVertical","marginHorizontal","backgroundColor","borderWidth","borderColor","borderRadius","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","padding"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport { Modal, StyleSheet, View, Text, TouchableWithoutFeedback } from \"react-native\";\nimport {useMutation} from \"react-apollo\";\nimport {createFlashcardMutation} from \"./queries\";\n// import {FontAwesomeIcon} from \"@fortawesome/react-native-fontawesome\";\n// import { faStar } from \"@fortawesome/free-solid-svg-icons\";\n// import { faStar as outlineStar } from \"@fortawesome/free-regular-svg-icons\";\n\nconst FlashcardModal = (props) => {\n    const [stars, setStars] = useState(\n         [\n            {name: \"star1\", level: 1, isFilled: false},\n            {name: \"star2\", level: 2, isFilled: false},\n            {name: \"star3\", level: 3, isFilled: false},\n            {name: \"star4\", level: 4, isFilled: false},\n            {name: \"star5\", level: 5, isFilled: false},\n        ]\n    );\n\n    const [createFlashcard, {mutationData}] = useMutation(createFlashcardMutation);\n\n    const onStarPress = (star) => {\n        if(!star.isFilled) {\n            stars.map(st => {\n                if(st.level <= star.level)\n                    st.isFilled = true;\n               // console.log(st);\n            });\n            const newStars = [...stars];\n          //  console.log(newStars);\n            setStars(newStars);\n        }\n        createFlashcard({\n            variables: {\n                pos: props.word.pos,\n                parsing: props.word.parsing,\n                word: props.word.word,\n                lemma: props.word.lemma,\n                gloss: props.word.gloss,\n                isActive: true,\n                levelLearned: star.level\n            }\n        })\n        props.onSelectLevel();\n    }\n\n    return (\n        <View style={styles.modalContainer}>\n            <Modal\n                animationType={\"slide\"}\n                transparent={true}\n                visible={props.visible}>\n                <View style={{flex: 1,\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                    alignItems: 'center'}}>\n                    <View style={styles.modalView}>\n                        <View style={styles.textContainer}>\n                            <Text>How well do you know {props.word.word}?</Text>\n                        </View>\n                        <View style={styles.starContainer}>\n                            {\n                                stars.map((star, i) => {\n                                    if(!star.isFilled) {\n                                        return (\n                                            <TouchableWithoutFeedback key={star.level} onPress={() => onStarPress(star)} style={styles.star}>\n                                                {/*{<FontAwesomeIcon icon={faStar} size={30} color={\"#1d78c1\"}/>}*/}\n                                                <Text>U</Text>\n                                            </TouchableWithoutFeedback>\n                                        )\n                                    }\n                                    else {\n                                        return (\n                                            <TouchableWithoutFeedback key={star.level} onPress={() => onStarPress(star)} style={styles.star}>\n                                                {/*<FontAwesomeIcon icon={outlineStar} size={30} color={\"#1d78c1\"} />*/}\n                                                <Text>F</Text>\n                                            </TouchableWithoutFeedback>\n                                        )\n                                    }\n                                })\n                            }\n                        </View>\n                    </View>\n                </View>\n            </Modal>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    modalContainer: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    modalView: {\n        flex:1,\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginVertical: 20,\n        marginHorizontal: 0,\n        backgroundColor: \"white\",\n        borderWidth: 0,\n        borderColor: 'transparent',\n        borderRadius: 20,\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 2\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 3.84,\n        elevation: 5,\n        height: 200,\n        width: \"100%\"\n    },\n    textContainer: {\n        flex: 1,\n        alignItems: \"center\"\n    },\n    starContainer: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-evenly\",\n        flex: 1\n    },\n    star: {\n        flex: 1,\n        padding: 20\n    }\n});\n\nexport default FlashcardModal\n"]},"metadata":{},"sourceType":"module"}