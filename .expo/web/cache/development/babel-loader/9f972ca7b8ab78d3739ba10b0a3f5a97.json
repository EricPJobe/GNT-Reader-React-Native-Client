{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/ilimilku/Projects/gntreader-rngp/client/gntreader/GNT-Reader-React-Native-Client/components/reader.js\";\n\nimport React, { useContext, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ReaderContext from \"../context\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { useQuery } from \"react-apollo\";\nimport { getWordsQuery } from \"./queries\";\nimport getPos from \"../utils/pos\";\nimport getParsing from \"../utils/parsing\";\n\nvar Reader = function Reader(_ref) {\n  var navigation = _ref.navigation;\n  var sortedData = [];\n  var words;\n  var context = {\n    bookName: 'Romans',\n    referenceFrom: '060101',\n    referenceTo: '060102'\n  };\n\n  var _useState = useState({\n    word: '',\n    lemma: '',\n    gloss: '',\n    pos: '',\n    parsing: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      morphInfo = _useState2[0],\n      setMorphInfo = _useState2[1];\n\n  var bookName = context.bookName;\n  var chapterFrom = context.referenceFrom.slice(2, 4).replace('0', '');\n  var chapterTo = context.referenceFrom.slice(4).replace('0', '');\n  var verseFrom = context.referenceTo.slice(2, 4).replace('0', '');\n  var verseTo = context.referenceTo.slice(4).replace('0', '');\n\n  var _useQuery = useQuery(getWordsQuery, {\n    variables: {\n      referenceFrom: context.referenceFrom,\n      referenceTo: context.referenceTo\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var onWordTouch = function onWordTouch(e) {\n    console.log(e);\n    var pos = getPos(e.pos);\n    var parsing = getParsing(e.parsing);\n    var word = e.word;\n    var lemma = e.lemma;\n    var gloss = e.gloss;\n    var partOfSpeech = pos;\n    var parsingInfo = '';\n    if (pos === 'verb') {\n      if (parsing.mood === \"participle\") parsingInfo = parsing.tense + \" \" + parsing.voice + \" \" + parsing.mood + \" \" + parsing.nounCase + \" \" + parsing.gender + \" \" + parsing.number;else parsingInfo = parsing.tense + \" \" + parsing.voice + \" \" + parsing.mood;\n    } else switch (pos) {\n      case 'noun':\n      case 'adjective':\n      case 'definite article':\n      case 'pronoun':\n      case 'relative pronoun':\n      case 'demonstrative pronoun':\n      case 'interrogative/indefinite pronoun':\n        parsingInfo = parsing.nounCase + \" \" + parsing.gender + \" \" + parsing.number;\n        break;\n\n      default:\n        break;\n    }\n    setMorphInfo({\n      word: word,\n      lemma: lemma,\n      gloss: gloss,\n      pos: partOfSpeech,\n      parsing: parsingInfo\n    });\n  };\n\n  if (data) {\n    console.log(data.words);\n    sortedData = _toConsumableArray(data.words);\n    sortedData.sort(function (a, b) {\n      return a.id - b.id;\n    });\n    console.log(sortedData);\n    words = sortedData.map(function (word) {\n      return React.createElement(View, {\n        key: word.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }\n      }, React.createElement(Pressable, {\n        onPress: function onPress() {\n          return onWordTouch(word);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: styles.word,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }\n      }, word.text)));\n    });\n  }\n\n  if (loading) return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 31\n    }\n  }, \"Loading...\"));\n  if (error) return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 23\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 29\n    }\n  }, \"Error! \", error.message));\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.titleContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.titleText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, bookName, \" \", chapterFrom, \":\", verseFrom, \" - \", chapterTo, \":\", verseTo)), React.createElement(View, {\n    style: styles.viewContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, React.createElement(ScrollView, {\n    contentContainerStyle: styles.viewer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, words)), React.createElement(View, {\n    style: styles.infoBoxContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.inline,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: styles.wordInfo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, morphInfo.word, \" \"), React.createElement(Text, {\n    style: styles.lemmaInfo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }\n  }, morphInfo.lemma, \" \"), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }, morphInfo.pos, \" \", morphInfo.parsing, \" \"), React.createElement(Text, {\n    style: styles.glossInfo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, morphInfo.gloss, \" \"))));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  titleContainer: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  titleText: {\n    fontWeight: \"bold\",\n    fontSize: 30,\n    color: \"#1d78c1\"\n  },\n  viewContainer: {\n    flex: 3\n  },\n  viewer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    margin: 20\n  },\n  infoBoxContainer: {\n    width: \"96%\",\n    flex: 1,\n    borderStyle: \"solid\",\n    borderWidth: 1,\n    borderColor: \"#CCCCCC\",\n    borderRadius: 10,\n    margin: 20,\n    padding: 20\n  },\n  wordInfo: {\n    fontSize: 15\n  },\n  lemmaInfo: {\n    fontSize: 15,\n    fontWeight: \"bold\"\n  },\n  glossInfo: {\n    fontStyle: \"italic\"\n  },\n  word: {\n    margin: 2,\n    borderRadius: 5,\n    backgroundColor: \"#EEEEEE\",\n    padding: 5\n  },\n  inline: {\n    display: \"inline\"\n  },\n  wordText: {\n    padding: 5\n  }\n});\nexport default Reader;","map":{"version":3,"sources":["/Users/ilimilku/Projects/gntreader-rngp/client/gntreader/GNT-Reader-React-Native-Client/components/reader.js"],"names":["React","useContext","useState","ReaderContext","useNavigation","useQuery","getWordsQuery","getPos","getParsing","Reader","navigation","sortedData","words","context","bookName","referenceFrom","referenceTo","word","lemma","gloss","pos","parsing","morphInfo","setMorphInfo","chapterFrom","slice","replace","chapterTo","verseFrom","verseTo","variables","loading","error","data","onWordTouch","e","console","log","partOfSpeech","parsingInfo","mood","tense","voice","nounCase","gender","number","sort","a","b","id","map","styles","text","message","container","titleContainer","titleText","viewContainer","viewer","infoBoxContainer","inline","wordInfo","lemmaInfo","glossInfo","StyleSheet","create","display","flex","flexDirection","justifyContent","alignItems","fontWeight","fontSize","color","flexWrap","margin","width","borderStyle","borderWidth","borderColor","borderRadius","padding","fontStyle","backgroundColor","wordText"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport {StyleSheet, Text, View, Pressable, ScrollView} from 'react-native';\nimport ReaderContext from \"../context\";\nimport {useNavigation} from \"@react-navigation/native\";\nimport {useQuery} from \"react-apollo\";\nimport {getWordsQuery} from \"./queries\";\nimport getPos from '../utils/pos';\nimport getParsing from '../utils/parsing';\n\nconst Reader = ({navigation}) => {\n    // const context = useContext(ReaderContext);\n    let sortedData = [];\n    let words;\n    const context = {\n        bookName: 'Romans',\n        referenceFrom: '060101',\n        referenceTo: '060102'\n    }\n    const [morphInfo, setMorphInfo] = useState({\n        word: '',\n        lemma: '',\n        gloss: '',\n        pos: '',\n        parsing: ''\n    });\n    const bookName = context.bookName;\n    const chapterFrom = context.referenceFrom.slice(2,4).replace('0', '');\n    const chapterTo = context.referenceFrom.slice(4).replace('0', '');\n    const verseFrom = context.referenceTo.slice(2,4).replace('0', '');\n    const verseTo = context.referenceTo.slice(4).replace('0', '');\n\n    const {loading, error, data } = useQuery(getWordsQuery, {\n        variables: {\n            referenceFrom: context.referenceFrom,\n            referenceTo: context.referenceTo\n        }\n    });\n\n    const onWordTouch = (e) => {\n        console.log(e);\n        let pos = getPos(e.pos);\n        let parsing = getParsing(e.parsing);\n        let word = e.word;\n        let lemma = e.lemma;\n        let gloss = e.gloss;\n        let partOfSpeech = pos;\n        let parsingInfo = '';\n\n        if(pos === 'verb')\n            if (parsing.mood === \"participle\")\n                parsingInfo = `${parsing.tense} ${parsing.voice} ${parsing.mood} ${parsing.nounCase} ${parsing.gender} ${parsing.number}`;\n            else\n                parsingInfo = `${parsing.tense} ${parsing.voice} ${parsing.mood}`\n        else\n            switch (pos) {\n                case 'noun':\n                case 'adjective':\n                case 'definite article':\n                case 'pronoun':\n                case 'relative pronoun':\n                case 'demonstrative pronoun':\n                case 'interrogative/indefinite pronoun':\n                    parsingInfo = `${parsing.nounCase} ${parsing.gender} ${parsing.number}`;\n                    break;\n                default: break;\n        }\n        setMorphInfo({\n            word: word,\n            lemma: lemma,\n            gloss: gloss,\n            pos: partOfSpeech,\n            parsing: parsingInfo\n        });\n\n    }\n\n    if(data) {\n        console.log(data.words);\n        sortedData = [... data.words];\n        sortedData.sort((a,b) => {\n            return a.id - b.id\n        });\n        console.log(sortedData);\n        words = sortedData.map(word => (\n            <View key={word.id}>\n                <Pressable onPress={() => onWordTouch(word)}>\n                    <Text style={styles.word}>{word.text}</Text>\n                </Pressable>\n            </View>\n        ));\n\n    }\n\n    if (loading) return <View><Text>Loading...</Text></View>;\n    if (error) return <View><Text>Error! {error.message}</Text></View>;\n\n    return (\n\n        <View style={styles.container}>\n            <View style={styles.titleContainer}>\n                <Text style={styles.titleText}>{bookName} {chapterFrom}:{verseFrom} - {chapterTo}:{verseTo}</Text>\n            </View>\n            <View style={styles.viewContainer}>\n                <ScrollView contentContainerStyle={styles.viewer}>\n                    {words}\n                </ScrollView>\n            </View>\n\n            <View style={styles.infoBoxContainer}>\n                <View style={styles.inline}>\n                    <Text style={styles.wordInfo}>{morphInfo.word} </Text>\n                    <Text style={styles.lemmaInfo}>{morphInfo.lemma} </Text>\n                    <Text>{morphInfo.pos} {morphInfo.parsing} </Text>\n                    <Text style={styles.glossInfo}>{morphInfo.gloss} </Text></View>\n            </View>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        display: \"flex\",\n        flex: 1,\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    titleContainer: {\n       flex: 1,\n       alignItems: \"center\",\n       justifyContent: \"center\",\n    },\n    titleText: {\n        fontWeight: \"bold\",\n        fontSize: 30,\n        color: \"#1d78c1\"\n    },\n    viewContainer: {\n        flex: 3\n    },\n    viewer: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        margin: 20\n    },\n    infoBoxContainer: {\n        width: \"96%\",\n        flex: 1,\n        borderStyle: \"solid\",\n        borderWidth: 1,\n        borderColor: \"#CCCCCC\",\n        borderRadius: 10,\n        margin: 20,\n        padding: 20\n    },\n    wordInfo: {\n        fontSize: 15\n    },\n    lemmaInfo: {\n        fontSize: 15,\n        fontWeight: \"bold\"\n    },\n    glossInfo: {\n        fontStyle: \"italic\"\n    },\n    word: {\n        margin: 2,\n        borderRadius: 5,\n        backgroundColor: \"#EEEEEE\",\n        padding: 5\n    },\n    inline: {\n        display: \"inline\"\n    },\n    wordText: {\n        padding: 5\n    }\n});\n\n// export default function(props) {\n//     const navigation = useNavigation();\n//     return <Reader {...props} navigation={navigation} />\n// }\n\nexport default Reader;\n"]},"metadata":{},"sourceType":"module"}