{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/ilimilku/Projects/gntreader-rngp/client/gntreader/GNT-Reader-React-Native-Client/App.js\";\nimport 'react-native-gesture-handler';\nimport React, { useState } from 'react';\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { ApolloProvider } from 'react-apollo';\nimport ReaderContext from \"./context\";\nimport SelectForm from \"./components/select-form\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport Reader from \"./components/reader\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nvar Stack = createStackNavigator();\nvar client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  cache: new InMemoryCache()\n});\nexport default function App(_ref) {\n  var navigation = _ref.navigation;\n\n  var updateReferences = function updateReferences(referenceFrom, referenceTo, bookName) {\n    setState({\n      referenceFrom: referenceFrom,\n      referenceTo: referenceTo,\n      bookName: bookName,\n      updateReferences: function updateReferences() {}\n    });\n  };\n\n  var _useState = useState({\n    referenceFrom: '',\n    referenceTo: '',\n    bookName: '',\n    updateReferences: updateReferences\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, React.createElement(ReaderContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, React.createElement(Reader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/ilimilku/Projects/gntreader-rngp/client/gntreader/GNT-Reader-React-Native-Client/App.js"],"names":["React","useState","ApolloClient","InMemoryCache","ApolloProvider","ReaderContext","SelectForm","NavigationContainer","Reader","createStackNavigator","Stack","client","uri","cache","App","navigation","updateReferences","referenceFrom","referenceTo","bookName","setState","state"],"mappings":";;AAAA,OAAO,8BAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,aAAP;AACA,OAAOC,UAAP;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,MAAP;AACA,SAAQC,oBAAR,QAAmC,yBAAnC;AAEA,IAAMC,KAAK,GAAGD,oBAAoB,EAAlC;AAEA,IAAME,MAAM,GAAG,IAAIT,YAAJ,CAAiB;AAC9BU,EAAAA,GAAG,EAAE,+BADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIV,aAAJ;AAFuB,CAAjB,CAAf;AAMA,eAAe,SAASW,GAAT,OAA2B;AAAA,MAAbC,UAAa,QAAbA,UAAa;;AAEtC,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,aAAD,EAAgBC,WAAhB,EAA6BC,QAA7B,EAA0C;AAC/DC,IAAAA,QAAQ,CAAC;AACLH,MAAAA,aAAa,EAAEA,aADV;AAELC,MAAAA,WAAW,EAAEA,WAFR;AAGLC,MAAAA,QAAQ,EAAEA,QAHL;AAILH,MAAAA,gBAAgB,EAAE,4BAAM,CAAE;AAJrB,KAAD,CAAR;AAMH,GAPD;;AAFsC,kBAWZf,QAAQ,CAAC;AAC/BgB,IAAAA,aAAa,EAAE,EADgB;AAE/BC,IAAAA,WAAW,EAAE,EAFkB;AAG/BC,IAAAA,QAAQ,EAAE,EAHqB;AAI/BH,IAAAA,gBAAgB,EAAEA;AAJa,GAAD,CAXI;AAAA;AAAA,MAW/BK,KAX+B;AAAA,MAWxBD,QAXwB;;AAkBtC,SACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAET,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEU,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADJ,CADF;AAeH","sourcesContent":["import 'react-native-gesture-handler';\nimport React, { useState } from 'react';\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { ApolloProvider } from 'react-apollo';\nimport ReaderContext from \"./context\";\nimport SelectForm from \"./components/select-form\"\nimport {NavigationContainer} from \"@react-navigation/native\";\nimport Reader from \"./components/reader\";\nimport {createStackNavigator} from \"@react-navigation/stack\";\n\nconst Stack = createStackNavigator();\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  cache: new InMemoryCache()\n})\n\n\nexport default function App({navigation}) {\n\n    const updateReferences = (referenceFrom, referenceTo, bookName) => {\n        setState({\n            referenceFrom: referenceFrom,\n            referenceTo: referenceTo,\n            bookName: bookName,\n            updateReferences: () => {}\n        });\n    }\n\n    const [state, setState] = useState({\n        referenceFrom: '',\n        referenceTo: '',\n        bookName: '',\n        updateReferences: updateReferences\n    });\n\n    return (\n      <ApolloProvider client={client}>\n          <ReaderContext.Provider value={state}>\n            {/*<Nav />*/}\n            {/*<SelectForm />*/}\n            {/*  <NavigationContainer>*/}\n            {/*      <Stack.Navigator initialRouteName=\"SelectForm\">*/}\n            {/*          <Stack.Screen name=\"SelectForm\" component={SelectForm} />*/}\n            {/*          <Stack.Screen name=\"Reader\" component={Reader} />*/}\n            {/*      </Stack.Navigator>*/}\n            {/*  </NavigationContainer>*/}\n            <Reader />\n          </ReaderContext.Provider>\n      </ApolloProvider>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}